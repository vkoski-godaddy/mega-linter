---
name: "Auto-Update Linters"
on:
  # Run when there is an update in master
  push:
    branches:
      - "master"
      - "AutoUpdate"
  # Automatically run every day at midnight
  schedule:
    - cron: "0 0 * * *"

###############
# Set the Job #
###############
jobs:
  # Skip checks: https://github.com/fkirc/skip-duplicate-actions#option-3-cancellation-only
  skip_checks:
    name: Skip checks
    runs-on: ubuntu-latest
    if: github.repository == 'nvuillam/mega-linter'
    steps:
      - uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

  build_help_versions:
    # Name the Job
    name: Auto-Update Linters
    # Set the agent to run on
    runs-on: ubuntu-latest
    # Prevent duplicate run from happening when a forked push is committed
    if: (github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository) && github.repository == 'nvuillam/mega-linter'
    # Set max build time for the job
    timeout-minutes: 60
    ##################
    # Load all steps #
    ##################
    steps:
      ##########################
      # Checkout the code base #
      ##########################
      - name: Checkout Code
        uses: actions/checkout@v2.3.4
        with:
          # Full git history is needed to get a proper list of changed files within `mega-linter`
          fetch-depth: 0

      ########################
      # Get the current date #
      ########################
      - name: Get current date
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> ${GITHUB_ENV}

      ###################################
      # Build image locally for testing #
      ###################################
      - name: Build image
        shell: bash
        run: docker build --build-arg "BUILD_DATE=${BUILD_DATE}" --build-arg "BUILD_REVISION=auto_update_${GITHUB_SHA}" --build-arg "BUILD_VERSION=auto_update_${GITHUB_SHA}" --no-cache -t nvuillam/mega-linter:auto_update_${GITHUB_SHA} . | while read line ; do echo "$(date +'%H:%M:%S')| $line"; done;
        timeout-minutes: 50

      #####################################
      # Run Linter against Test code base #
      #####################################
      - name: Collect latest versions and help
        id: compute_versions
        shell: bash
        run: docker run -e UPGRADE_LINTERS_VERSION=true -e GITHUB_SHA=${GITHUB_SHA} -e PAT="${{secrets.PAT}}" -e MEGALINTER_VOLUME_ROOT="${GITHUB_WORKSPACE}" -v "/var/run/docker.sock:/var/run/docker.sock:rw" -v ${GITHUB_WORKSPACE}:/tmp/lint nvuillam/mega-linter:auto_update_${GITHUB_SHA}
        timeout-minutes: 15

      # Upload Mega-Linter artifacts
      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Mega-Linter reports
          path: |
            docs
            report

      # Create pull request if there are updates
      - name: Create Pull Request
        id: cpr
        if: steps.compute_versions.outputs.has_updated_versions == 1
        uses: peter-evans/create-pull-request@v4.2.1
        with:
          token: ${{ secrets.PAT }}
          author: "Nicolas Vuillamy <nicolas.vuillamy@gmail.com>"
          commit-message: "[automation] Auto-update linters version, help and documentation"
          delete-branch: true
          title: "[automation] Auto-update linters version, help and documentation"
          body: "[automation] Auto-update linters version, help and documentation"
          labels: dependencies,automerge
      - name: Create PR output
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
