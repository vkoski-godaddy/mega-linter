---
#########################
#########################
## Deploy Docker Image ##
#########################
#########################

#
# Documentation:
# https://help.github.com/en/articles/workflow-syntax-for-github-actions
#

#######################################
# Start the job on all push to master #
#######################################
#############################
# Start the job on all push #
#############################
name: "Build & Deploy - DEV"
on:
  push:
    branches-ignore: [master, alpha]
  pull_request:
    branches-ignore: []

###############
# Set the Job #
###############
jobs:
  # Skip checks: https://github.com/fkirc/skip-duplicate-actions#option-3-cancellation-only
  skip_checks:
    name: Skip checks
    if: "!contains(github.event.head_commit.message, 'skip deploy')"
    runs-on: ubuntu-latest
    steps:
      - uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

  build:
    # Name the Job
    name: Tests + Deploy Docker Image - DEV
    # Set the agent to run on
    runs-on: ubuntu-latest
    # Prevent duplicate run from happening when a forked push is committed
    if: (github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository) && !contains(github.event.head_commit.message, 'skip deploy')
    # Set max build time for the job
    timeout-minutes: 90
    ##################
    # Load all steps #
    ##################
    steps:
      ##########################
      # Checkout the code base #
      ##########################
      - name: Checkout Code
        uses: actions/checkout@v2.3.4
        with:
          # Full git history is needed to get a proper list of changed files within `mega-linter`
          fetch-depth: 0

      ########################
      # Get the current date #
      ########################
      - name: Get current date
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> ${GITHUB_ENV}

      ########################
      # Build image tag name #
      ########################
      - name: Build image tag name
        id: image_tag
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          TAG="test-${GITHUB_ACTOR}-${BRANCH_NAME}"
          echo "Tag name: ${TAG}"
          echo "::set-output name=tag::${TAG}"

      ###################################
      # Build image locally for testing #
      ###################################
      - name: Build image (quick)
        if: "contains(github.event.head_commit.message, 'quick build')"
        id: docker_build_quick
        shell: bash
        run: |
          function docker_tag_exists() {
              echo "Checking existence of https://hub.docker.com/v2/repositories/$1/tags/$2"
              curl --silent -f -lSL https://hub.docker.com/v2/repositories/$1/tags/$2 > /dev/null
          }
          MEGA_LINTER_BASE_IMAGE="nvuillam/mega-linter:latest"
          if docker_tag_exists nvuillam/mega-linter ${{steps.image_tag.outputs.tag}}; then
             MEGA_LINTER_BASE_IMAGE="nvuillam/mega-linter:${{steps.image_tag.outputs.tag}}"
             echo "Reusing previously built image as base for quick build: ${MEGA_LINTER_BASE_IMAGE}"
          fi
          docker build --build-arg "BUILD_DATE=${BUILD_DATE}" --build-arg "BUILD_REVISION=${GITHUB_SHA}" --build-arg "BUILD_VERSION=${GITHUB_SHA}" --build-arg "MEGALINTER_BASE_IMAGE=${MEGA_LINTER_BASE_IMAGE}" --no-cache -f "Dockerfile-quick" -t nvuillam/mega-linter:${{steps.image_tag.outputs.tag}} . | while read line ; do echo "$(date +'%H:%M:%S')| $line"; done;
        timeout-minutes: 60

      #######################################
      # Build image (full for forked repos) #
      #######################################
      - name: Build image (full from forks)
        if: |
          (
          (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository) ||
          (github.event_name == 'push' && github.repository != 'nvuillam/mega-linter')
          )
          &&
          !contains(github.event.head_commit.message, 'quick build')
        id: docker_build
        shell: bash
        run: docker build --build-arg "BUILD_DATE=${BUILD_DATE}" --build-arg "BUILD_REVISION=${GITHUB_SHA}" --build-arg "BUILD_VERSION=${GITHUB_SHA}" --no-cache -t nvuillam/mega-linter:${{steps.image_tag.outputs.tag}} . | while read line ; do echo "$(date +'%H:%M:%S')| $line"; done;
        timeout-minutes: 60

      ####################################
      # Build image (full for main repo) #
      ####################################
      - name: Build image (full from main repo) & push
        if: |
          (
          (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) ||
          (github.event_name == 'push' && github.repository == 'nvuillam/mega-linter')
          )
          &&
          !contains(github.event.head_commit.message, 'quick build')
        env:
          # Set the Env Vars
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_REPO: nvuillam/mega-linter
          IMAGE_VERSION: ${{steps.image_tag.outputs.tag}}
          DOCKERFILE_PATH: Dockerfile
          REGISTRY: Docker
        shell: bash
        run: .automation/upload-docker.sh || true

      #####################################
      # Run Linter test cases #
      #####################################
      - name: Run Test Cases
        shell: bash
        run: |
          export CI_ENV="$(bash <(curl -s https://codecov.io/env)) -e GITHUB_ACTIONS"
          TEST_KEYWORDS_TO_USE=""
          if [[ "${{github.event.head_commit.message}}" == *"TEST_KEYWORDS="* ]]; then
            COMMIT_MSG="${{github.event.head_commit.message}}"
            TEST_KEYWORDS_TO_USE=${COMMIT_MSG#*TEST_KEYWORDS=}
            echo "Run only tests with keywords ${TEST_KEYWORDS_TO_USE}"
            if [[ "${TEST_KEYWORDS_TO_USE}" =~ $'\r' ]]; then
                echo "Problem while parsing test keywords: switch back to all tests"
                TEST_KEYWORDS_TO_USE=""
            fi
          fi
          docker run $CI_ENV -e TEST_CASE_RUN=true -e OUTPUT_FORMAT=tap -e OUTPUT_FOLDER=${GITHUB_SHA} -e OUTPUT_DETAILS=detailed -e GITHUB_SHA=${GITHUB_SHA} -e PAT="${{secrets.PAT}}" -e TEST_KEYWORDS="${TEST_KEYWORDS_TO_USE}" -e MEGALINTER_VOLUME_ROOT="${GITHUB_WORKSPACE}" -v "/var/run/docker.sock:/var/run/docker.sock:rw" -v ${GITHUB_WORKSPACE}:/tmp/lint nvuillam/mega-linter:${{steps.image_tag.outputs.tag}}
        timeout-minutes: 30

      #####################################
      # Run Linter against ALL code base  #
      #####################################
      - name: Run against all code base
        if: "!contains(github.event.head_commit.message, 'quick build')"
        shell: bash
        run: docker run -e GITHUB_REPOSITORY="${{github.repository}}" -e GITHUB_SHA="${{github.sha}}" -e GITHUB_TOKEN="${{github.token}}" -e GITHUB_RUN_ID="${{github.run_id}}" -e PAT="${{secrets.PAT}}" -v "/var/run/docker.sock:/var/run/docker.sock:rw" -v ${GITHUB_WORKSPACE}:/tmp/lint nvuillam/mega-linter:${{steps.image_tag.outputs.tag}}
        timeout-minutes: 10

      # Upload Mega-Linter artifacts
      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Mega-Linter reports
          path: |
            report
            mega-linter.log
            linter-helps.json
            linter-versions.json

      - name: debug
        if: ${{ success() }} || ${{ failure() }}
        run: echo ${{ steps.docker_build.outcome }}

      # Test mega-linter-runner with newly created image
      - name: Setup Node
        if: ${{ steps.docker_build.outcome }} == 'success' && (${{ success() }} || ${{ failure() }}) && !contains(github.event.head_commit.message, 'quick build')
        uses: actions/setup-node@v2.1.5
        with:
          node-version: "12"
      - name: Install NPM dependencies
        if: ${{ steps.docker_build.outcome }} == 'success' && (${{ success() }} || ${{ failure() }}) && !contains(github.event.head_commit.message, 'quick build')
        run: cd mega-linter-runner && sudo npm ci && sudo npm link
      - name: Run mega-linter-runner tests
        if: ${{ steps.docker_build.outcome }} == 'success' && (${{ success() }} || ${{ failure() }}) && !contains(github.event.head_commit.message, 'quick build')
        run: cd mega-linter-runner && MEGALINTER_RELEASE=${{steps.image_tag.outputs.tag}} MEGALINTER_NO_DOCKER_PULL=true npm run test

      # Free disk space
      - name: Free Disk space
        shell: bash
        run: |
          sudo rm -rf /usr/local/lib/android  # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      ##############################################
      # Check Docker image security with Trivy #
      ##############################################
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.8.0
        with:
          image-ref: "docker.io/nvuillam/mega-linter:${{steps.image_tag.outputs.tag}}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
